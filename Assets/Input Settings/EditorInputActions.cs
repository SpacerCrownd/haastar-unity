//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Settings/EditorInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EditorInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EditorInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EditorInputActions"",
    ""maps"": [
        {
            ""name"": ""Editor"",
            ""id"": ""b2f8f738-8fdf-4892-976d-8e87946f7298"",
            ""actions"": [
                {
                    ""name"": ""PlaceTile"",
                    ""type"": ""Button"",
                    ""id"": ""78456bf3-56ab-4b8d-98f4-5d3a51106492"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectTileGround"",
                    ""type"": ""Button"",
                    ""id"": ""83b19eb2-5d59-437c-b7aa-23211c25f184"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectTileWater"",
                    ""type"": ""Button"",
                    ""id"": ""3ca0946a-a2b9-4613-9e4a-e186638feb70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectTileRock"",
                    ""type"": ""Button"",
                    ""id"": ""2d3a8091-6c41-4f5f-a6e6-d0f6e1868b90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""3f312132-0d65-42b8-9454-10bf53493197"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a509fe9-fc12-4f4e-94b8-10719e6c792a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceTile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7950d99b-eb08-42d1-ba71-e95656083a87"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTileGround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9444b9ad-1b46-489b-944a-ac5af1763154"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTileWater"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""437ea12f-0430-4eee-b6d2-db69a96446b1"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTileRock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5f1e037-4708-4920-95bf-d497974277f8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Editor
        m_Editor = asset.FindActionMap("Editor", throwIfNotFound: true);
        m_Editor_PlaceTile = m_Editor.FindAction("PlaceTile", throwIfNotFound: true);
        m_Editor_SelectTileGround = m_Editor.FindAction("SelectTileGround", throwIfNotFound: true);
        m_Editor_SelectTileWater = m_Editor.FindAction("SelectTileWater", throwIfNotFound: true);
        m_Editor_SelectTileRock = m_Editor.FindAction("SelectTileRock", throwIfNotFound: true);
        m_Editor_MousePosition = m_Editor.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Editor
    private readonly InputActionMap m_Editor;
    private List<IEditorActions> m_EditorActionsCallbackInterfaces = new List<IEditorActions>();
    private readonly InputAction m_Editor_PlaceTile;
    private readonly InputAction m_Editor_SelectTileGround;
    private readonly InputAction m_Editor_SelectTileWater;
    private readonly InputAction m_Editor_SelectTileRock;
    private readonly InputAction m_Editor_MousePosition;
    public struct EditorActions
    {
        private @EditorInputActions m_Wrapper;
        public EditorActions(@EditorInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceTile => m_Wrapper.m_Editor_PlaceTile;
        public InputAction @SelectTileGround => m_Wrapper.m_Editor_SelectTileGround;
        public InputAction @SelectTileWater => m_Wrapper.m_Editor_SelectTileWater;
        public InputAction @SelectTileRock => m_Wrapper.m_Editor_SelectTileRock;
        public InputAction @MousePosition => m_Wrapper.m_Editor_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Editor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActions set) { return set.Get(); }
        public void AddCallbacks(IEditorActions instance)
        {
            if (instance == null || m_Wrapper.m_EditorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditorActionsCallbackInterfaces.Add(instance);
            @PlaceTile.started += instance.OnPlaceTile;
            @PlaceTile.performed += instance.OnPlaceTile;
            @PlaceTile.canceled += instance.OnPlaceTile;
            @SelectTileGround.started += instance.OnSelectTileGround;
            @SelectTileGround.performed += instance.OnSelectTileGround;
            @SelectTileGround.canceled += instance.OnSelectTileGround;
            @SelectTileWater.started += instance.OnSelectTileWater;
            @SelectTileWater.performed += instance.OnSelectTileWater;
            @SelectTileWater.canceled += instance.OnSelectTileWater;
            @SelectTileRock.started += instance.OnSelectTileRock;
            @SelectTileRock.performed += instance.OnSelectTileRock;
            @SelectTileRock.canceled += instance.OnSelectTileRock;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IEditorActions instance)
        {
            @PlaceTile.started -= instance.OnPlaceTile;
            @PlaceTile.performed -= instance.OnPlaceTile;
            @PlaceTile.canceled -= instance.OnPlaceTile;
            @SelectTileGround.started -= instance.OnSelectTileGround;
            @SelectTileGround.performed -= instance.OnSelectTileGround;
            @SelectTileGround.canceled -= instance.OnSelectTileGround;
            @SelectTileWater.started -= instance.OnSelectTileWater;
            @SelectTileWater.performed -= instance.OnSelectTileWater;
            @SelectTileWater.canceled -= instance.OnSelectTileWater;
            @SelectTileRock.started -= instance.OnSelectTileRock;
            @SelectTileRock.performed -= instance.OnSelectTileRock;
            @SelectTileRock.canceled -= instance.OnSelectTileRock;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IEditorActions instance)
        {
            if (m_Wrapper.m_EditorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditorActions instance)
        {
            foreach (var item in m_Wrapper.m_EditorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditorActions @Editor => new EditorActions(this);
    public interface IEditorActions
    {
        void OnPlaceTile(InputAction.CallbackContext context);
        void OnSelectTileGround(InputAction.CallbackContext context);
        void OnSelectTileWater(InputAction.CallbackContext context);
        void OnSelectTileRock(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
